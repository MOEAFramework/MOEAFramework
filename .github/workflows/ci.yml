name: Tests

on:
  push:
  workflow_dispatch:
    inputs:
      all-tests:
        type: choice
        required: true
        description: Include IgnoreOnCI tests
        options:
          - 'false'
          - 'true'
        default: 'false'

jobs:
  ant-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java: [ '17', '18', '19', '20', '21' ]
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: zulu
    - name: Set up Matlab
      uses: matlab-actions/setup-matlab@v1
    - name: Download test dependencies
      run: ant -f test.xml download-all
    - name: Setup Coco Framework
      run: |
        sudo rm /usr/bin/javah

        git clone https://github.com/numbbo/coco
        cd coco
        python do.py run-java
          
        cd code-experiments/build/java
        sed 's/Java_CocoJNI_/Java_org_moeaframework_problem_BBOB2016_CocoJNI_/g' CocoJNI.c > org_moeaframework_problem_BBOB2016_CocoJNI.c
        sed 's/Java_CocoJNI_/Java_org_moeaframework_problem_BBOB2016_CocoJNI_/g' CocoJNI.h > org_moeaframework_problem_BBOB2016_CocoJNI.h
        gcc -I $JAVA_HOME/include -I $JAVA_HOME/include/linux -o libCocoJNI.so -fPIC -shared org_moeaframework_problem_BBOB2016_CocoJNI.c

        sudo mkdir -p /usr/java/packages/lib/
        sudo mv libCocoJNI.so /usr/java/packages/lib/
    - name: Test with Ant - Java ${{ matrix.java }}
      run: ant -f test.xml
      env:
        ALL_TESTS: ${{ inputs.all-tests || 'false' }}
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ant-test-results-${{ matrix.java }}
        path: test-results     

  maven-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: temurin
        cache: maven
    - name: Set up Matlab
      uses: matlab-actions/setup-matlab@v1
    - name: Prepare Maven project
      run: ant -f test.xml build-maven-tests
    - name: Run Maven tests
      run: |
        cd build
        mvn test
      env:
        ALL_TESTS: ${{ inputs.all-tests || 'false' }}
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: maven-test-results
        path: build/target/surefire-reports

  content-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: temurin
    - name: Validate docs
      run: ant -f build.xml validate-docs
    - name: Validate links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        folder-path: docs/
        file-path: README.md
    - name: Run Checkstyle
      run: |
        cd test/checkstyle
        checkstyle_result=0
        ant -f build.xml check-style || checkstyle_result=$?
        if [ "$checkstyle_result" -ne "0" ]; then
          echo "::warning title=Checkstyle failed::Checkstyle identified one ore more violations, see logs for details!"
        fi

  example-tests:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: temurin
    - name: Package binary
      run: ant -f build.xml package-binary
    - name: Compiler info
      run: gcc --version
    - name: Test examples
      shell: bash
      run: |
        cd build/MOEAFramework-*
        make -C examples

        # Compile all Java examples
        CLASSPATH="lib/*${{ runner.os == 'Linux' && ':' || ';' }}examples"
        find examples/ -type f -name '*.java' | xargs -rt -I "{}" javac -classpath "${CLASSPATH}" "{}"

        # Run all examples, excluding files requiring a GUI
        find examples/ -type f -name '*.java' | xargs -r grep -l 'public static void main(' | xargs -r grep -iL 'plot\|gui\|tsp' | sed 's~/~.~g; s/.java$//; s/examples.//' | xargs -rt -I "{}" java -classpath "${CLASSPATH}" "{}"
    - name: Test solve.sh
      if: runner.os == 'Linux'
      run: examples/org/moeaframework/examples/experiment/solve.sh
    - name: Test sensitivity.sh
      if: runner.os == 'Linux'
      run: examples/org/moeaframework/examples/experiment/sensitivity.sh

  package-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: temurin
    - name: Package binary
      run: ant -f build.xml package-binary
    - name: Package source
      run: ant -f build.xml package-source
    - name: Package demo
      run: ant -f build.xml package-demo
    - name: Package website
      run: ant -f build.xml package-website
