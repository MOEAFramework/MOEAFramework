name: Tests

on:
  push:
  workflow_dispatch:
    inputs:
      all-tests:
        type: choice
        required: true
        description: Include IgnoreOnCI tests
        options:
          - 'false'
          - 'true'
        default: 'false'
      java-distribution:
        type: choice
        required: true
        description: Java distribution
        options:
          - 'zulu'
          - 'temurin'
          - 'oracle'
        default: 'zulu'
      java-version:
        type: choice
        required: true
        description: Java version
        options:
          - '17'
          - '18'
          - '19'
          - '20'
          - '21'
          - '22'
        default: '19'
      macos-version:
        type: choice
        required: true
        description: MacOS version
        options:
          - '12'
          - '13'
          - '14'
        default: '13'
        
env:
  ALL_TESTS: ${{ inputs.all-tests || 'false' }}

jobs:
  ant-tests:
    if: false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        java: [ 17, 18, 19, 20, 21 ]
        include:
          - os: windows-latest
            java: 21
          - os: macos-${{ inputs.macos-version || '13' }}
            java: 21
    steps:
    - name: Setup build
      uses: MOEAFramework/.github/actions/setup-build@main
      with:
        java-version: ${{ matrix.java }}
        java-distribution: ${{ inputs.java-distribution }}
        setup-matlab: true
        setup-python: true
        python-dependencies: pandas cvxopt
    - name: Download Java test dependencies
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        file: test.xml
        target: download-all
    - name: Set up Coco Framework (Linux)
      if: runner.os == 'Linux'
      run: test/setup-coco.sh
    - name: Run Ant tests
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        file: test.xml
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ant-test-results-${{ matrix.os }}-${{ matrix.java }}
        path: test-results     

  maven-tests:
    if: false
    runs-on: ubuntu-latest
    steps:
    - name: Setup build
      uses: MOEAFramework/.github/actions/setup-build@main
      with:
        java-version: ${{ inputs.java-version || '19' }}
        java-distribution: ${{ inputs.java-distribution }}
        setup-matlab: true
        setup-python: true
        python-dependencies: pandas cvxopt
    - name: Prepare Maven project
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        target: build-maven
    - name: Run Maven tests
      run: |
        cd build
        mvn test
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: maven-test-results-ubuntu-${{ env.JAVA_VERSION }}
        path: build/target/surefire-reports

  doc-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Setup build
      uses: MOEAFramework/.github/actions/setup-build@main
      with:
        java-version: ${{ inputs.java-version }}
        java-distribution: ${{ inputs.java-distribution }}
    - name: Validate docs
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        target: update-docs
    - name: Upload website
      uses: actions/upload-artifact@v4
      with:
        name: docs-${{ matrix.os }}
        path: docs

  content-tests:
    if: false
    runs-on: ubuntu-latest
    steps:
    - name: Setup build
      uses: MOEAFramework/.github/actions/setup-build@main
      with:
        java-version: ${{ inputs.java-version }}
        java-distribution: ${{ inputs.java-distribution }}
    - name: Validate docs
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        target: validate-docs
    - name: Extract Java hyperlinks
      run: |
        find . -type f -name "*.java" \
          -exec grep -ioP '\bhttp[s]?://[^\b"><}\s]+\b' {} \; \
          | sort | uniq > hyperlinks.md
        cat hyperlinks.md
    - name: Validate links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        folder-path: docs/
        file-path: README.md,hyperlinks.md
    - name: Run Checkstyle
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        directory: test/checkstyle
        target: check-style
        warning: Checkstyle identified one ore more violations, see logs for details!
    - name: Setup website
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        target: package-website
    - name: Build website with Jekyll
      run: |
        cd build
        sudo gem install bundler jekyll
        sudo bundle install
        bundle exec jekyll build
    - name: Upload website
      uses: actions/upload-artifact@v4
      with:
        name: Website
        path: build/_site

  example-tests:
    if: false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: macos-${{ inputs.macos-version || '13' }}
    steps:
    - name: Setup build
      uses: MOEAFramework/.github/actions/setup-build@main
      with:
        java-version: ${{ inputs.java-version }}
        java-distribution: ${{ inputs.java-distribution }}
        setup-python: true
        python-dependencies: cvxopt
    - name: Package binary
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        target: package-binary
    - name: Test CLI
      run: |
        cd build/MOEAFramework-*
        
        # begin-example: cli-help
        ./cli --help
        # end-example: cli-help

        # begin-example: cli-version
        ./cli --version
        # end-example: cli-version

        # begin-example: cli-solve
        ./cli solve --problem DTLZ2 --algorithm NSGAII --numberOfEvaluations 10000 --output NSGAII_DTLZ2_Runtime.txt
        ./cli calc --problem DTLZ2 --indicator hypervolume NSGAII_DTLZ2_Runtime.txt
        # end-example: cli-solve
    - name: Test CLI DataStore
      if: runner.os == 'Linux'
      run: |
        cd build/MOEAFramework-*

        # begin-example: datastore
        # List contents of a container
        ./cli datastore list "file://results?populationSize=100&seed=1"

        # Write to blob
        echo "Hello world" | ./cli datastore set "file://results?populationSize=100&seed=1#greeting"

        # Read from blob
        ./cli datastore get "file://results?populationSize=100&seed=1#greeting"
        # end-example: datastore
    - name: Test CLI (init --shell bash)
      if: runner.os == 'Linux'
      run: |
        cd build/MOEAFramework-*
        
        eval "$(./cli init --shell bash)"
        [ "$MOEAFRAMEWORK_ROOT" = "$(pwd)" ]
        [ "$(which cli)" = "$(pwd)/cli" ]
    - name: Test CLI (init --shell bash --permanent)
      if: runner.os == 'Linux'
      run: |
        cd build/MOEAFramework-*
      
        cp ~/.bash_profile ~/.bash_profile.bkup
        eval "$(./cli init --shell bash --permanent)"
        EXPECTED="$(./cli init --shell bash)"
        ACTUAL="$(diff ~/.bash_profile ~/.bash_profile.bkup | grep "<" | cut -c 3-)"
        [ "$EXPECTED" = "$ACTUAL" ]
    - name: Test CLI (init --shell cmd)
      if: runner.os == 'Windows'
      shell: cmd
      run: cd build/MOEAFramework-* && cli init --shell cmd > commands.cmd && commands && where cli
    - name: Test CLI (init --shell pwsh)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd build/MOEAFramework-*
        
        # TODO: Temporary fix - removing Clear-Item alias that conflicts with name
        Remove-Alias cli -Force
        
        $commands = ./cli init | Out-String
        Invoke-Expression $commands
        
        $actual = (Get-Command cli).Path
        $expected = Join-Path (Get-Location) "cli.cmd"
        if ($actual -ne $expected) {
          Write-Warning "FAILED: Incorrect local path: '$($actual)', expected '$($expected)'"
          exit -1
        }
    - name: Test CLI (init --shell pwsh --permanent)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd build/MOEAFramework-*
      
        $oldPath = [Environment]::GetEnvironmentVariable("PATH", [EnvironmentVariableTarget]::Machine)
        $commands = ./cli init --permanent | Out-String
        Invoke-Expression $commands
        
        $actual = [Environment]::GetEnvironmentVariable("PATH", [EnvironmentVariableTarget]::Machine)
        $expected = "$(Get-Location);$($oldPath)"
        if ($actual -ne $expected) {
          Write-Warning "FAILED: Incorrect system path: '$($actual)', expected '$($expected)'"
          exit -1
        }
    - name: Test examples
      run: |
        cd build/MOEAFramework-*
        . examples/org/moeaframework/examples/generalizedDecomposition/generateWeights.sh
        ./cli TestExamples --headless
    - name: Test solve.sh
      run: |
        cd build/MOEAFramework-*
        . examples/org/moeaframework/examples/solve/solve.sh
    - name: Test sensitivity.sh
      run: |
        cd build/MOEAFramework-*
        . examples/org/moeaframework/examples/sensitivity/sensitivity.sh
