name: Validate and stage release

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: The version to publish
        required: true

jobs:
  stage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: temurin
      - name: Get project settings
        run: |
          shortname=$(cat META-INF/build.properties | awk '{split($0,a,"="); if (a[1]=="shortname") print tolower(a[2])}' |  tr -d '[:space:]')
          version=$(cat META-INF/build.properties | awk '{split($0,a,"="); if (a[1]=="version") print tolower(a[2])}' |  tr -d '[:space:]')
          echo "BUILD_NAME=${shortname}" >> $GITHUB_ENV
          echo "BUILD_VERSION=${version}" >> $GITHUB_ENV
      - name: Validate version number
        run: |
          echo "${{ inputs.version }}" | grep -E '^[0-9]+\.[0-9]+(\.[0-9]+)?$' || (>&2 echo "Invalid version number format"; exit -1)
          [ "${{ inputs.version }}" == "${BUILD_VERSION}" ] || (>&2 echo "Version does not match value in build.properties"; exit -1)
          [ "${{ inputs.version }}" == "$(cat README.md | grep '<version>' | tr -d '<>/[:alpha:][:space:]')" ] || (>&2 echo "Version does not match value in README.md"; exit -1)
          [ "${{ inputs.version }}" == "$(cat docs/news.md | grep "## " | head -n 1 | grep -oEi '[0-9]+\.[0-9]+(\.[0-9]+)?')" ] || (>&2 echo "Version does not match value in docs/news.md"; exit -1)
      - name: Build artifacts
        run: |
          ant package-binary
          ant package-demo
          ant package-source
          ant package-website
          tar -czf dist/website.tar.gz build
      - name: Generate release notes
        run: |
          cat docs/news.md | awk '/## Version ${{ inputs.version }}/{flag=1; next} /##/{flag=0} flag' > dist/release_notes.md
          [ "$(wc -l < dist/release_notes.md)" -gt 0 ] || (>&2 echo "Unable to read release notes from docs/news.md"; exit -1)
      - uses: actions/upload-artifact@v3
        with:
          name: Release Bundle
          path: dist/
      #- name: Stage GitHub release
      #  uses: ncipollo/release-action@v1
      #  with:
      #    artifacts: "dist/*.tar.gz"
      #    bodyFile: "dist/release_notes.md"
      #    name: "Version ${{ inputs.version }}"
      #    tag: "v${{ inputs.version }}"
      #    draft: true
      #    prerelease: true
