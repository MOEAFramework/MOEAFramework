# Copyright 2009-2018 David Hadka
# 
# This file is part of the MOEA Framework.
# 
# The MOEA Framework is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by 
# the Free Software Foundation, either version 3 of the License, or (at your 
# option) any later version.
# 
# The MOEA Framework is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
# License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License 
# along with the MOEA Framework.  If not, see <http://www.gnu.org/licenses/>.

# This file contains the default English strings used in the examples GUI
# package.  To create a translation into Spanish, for example, copy this file
# to LocalStrings_es.properties and replace the strings with their translation.

introduction.name = Introduction
introduction.description = <html><h1>Introduction</h1>\
  The MOEA Framework is a free and open source Java library for developing and \
  experimenting with multiobjective evolutionary algorithms (MOEAs) and other \
  general-purpose multiobjective optimization algorithms. The MOEA Framework \
  supports genetic algorithms, differential evolution, particle swarm \
  optimization, genetic programming, grammatical evolution, and more. A number \
  of algorithms are provided out-of-the-box, including NSGA-II, \u03B5-MOEA, \
  GDE3 and MOEA/D. In addition, the MOEA Framework provides the tools \
  necessary to rapidly design, develop, execute and statistically test \
  optimization algorithms.\
  <p>\
  This demo application provides a number of examples to demonstrate the \
  capabilities of the MOEA Framework.  You can run an example by selecting its \
  name to the left and clicking the Run Example button.  Each example also \
  provides its source code for you to browse and learn from.\
  <p>\
  Please visit <a href=\"http://www.moeaframework.org\">\
  http://www.moeaframework.org</a> to get the latest updates and information \
  on the MOEA Framework.
  
example1.name = Example 1
example1.description = <html><h1>Example 1 - Simple Run</h1>\
  The MOEA Framework aims to simply the process of solving multiobjective \
  optimization problems using multiobjective evolutionary algorithms (MOEAs). \
  The Executor class provides all the necessary features to execute an \
  optimization algorithm on a specific problem.  For example, this example \
  runs the popular NSGA-II algorithm on the UF1 test problem.\
  <p>\
  The Executor class is the starting point when using the MOEA Framework.  It \
  provides all of the functions necessary to configure an optimization \
  algorithm, solve an optimization problem, and access the results.  See the \
  <code>Example1.java</code> tab to view the source code for this example. \
  Click the Run Example button to run this example.\
  <p>\
  When finished, the output will show several lines containing numbers.  Since \
  the UF1 problem is a two-objective problem, a line contains the two \
  objectives for a solution.  Each line is a Pareto optimal solution for this \
  problem.
				
example2.name = Example 2
example2.description = <html><h1>Example 2 - Statistical Comparisons</h1>\
  The MOEA Framework also provides many classes for performing robust \
  statistical analyses to compare two or more optimization algorithms. \
  Statistical analyses are provided by the Analyzer class. The Analyzer can \
  display the min, median, max and aggregate values for multiple performance \
  indicators, including hypervolume, generational distance, inverted \
  generational distance, additive \u03B5-indicator, spacing and contribution. \
  Additionally, Kruskal-Wallis and Mann-Whitney U tests provide statistical \
  significance results.\
  <p>\
  In this example, we compare three algorithms (NSGA-II, GDE3, and \
  \u03B5-MOEA) using the hypervolume metric.  See the \
  <code>Example2.java</code> tab to walk through the source code.  Click the \
  Run Example button to run this example.  It may take several minutes for the \
  output to appear.
  
example3.name = Example 3
example3.description = <html><h1>Example 3 - Collecting Runtime Dynamics</h1>\
  Runtime dynamics provide insight into the behavior of an optimization \
  algorithm throughout a run. For instance, one can observe how solution \
  quality changes with the number of function evaluations (NFE). The \
  Instrumenter class records the runtime dynamics.\
  <p>\
  In this example, we will observe how the generational distance metric \
  converges to 0 as NSGA-II solves the UF1 problem.  See the \
  <code>Example3.java</code> tab to walk through the source code.  Click the \
  Run Example button to run this example.  It may take several minutes for the \
  output to appear.
  
example4.name = Example 4
example4.description = <html><h1>Example 4 - Defining New Problems</h1>\
  A number of methods are available to provide custom, user-defined problems \
  that cleanly integrate with all other components of the MOEA Framework. This \
  example demonstrates how to create and optimize the two-objective DTLZ2 \
  problem.  The <code>Example4.java</code> tab shows how we create a class \
  called <code>MyDTLZ2</code> and define three methods:\
  <ol>\
    <li>the constructor,\
    <li>the <code>newSolution</code> method, and\
    <li>the <code>evaluate</code> method.\
  </ol>\
  Inside the constructor, we simply call <code>super(11, 2);</code> to inform \
  the parent class (<code>AbstractProblem</code>) that this problem has 11 \
  decision variables and 2 objectives.  The <code>newSolution</code> method \
  defines the problem representation (the number and types of its decision \
  variables). The <code>evaluate</code> method takes a solution and computes \
  its objective function values.  Once the problem is defined, it can be used \
  seamlessly within the MOEA Framework.\
  <p>\
  Click the Run Example button to run this example.  Similar to Example 1, the \
  output will list all of the Pareto optimal solutions for the DTLZ2 problem.
  
regression1.name = Symbolic Regression - Function 1
regression1.description = <html><h1>Symbolic Regression - Function 1</h1>\
  Symbolic regression attempts to discover a mathematical expression that best \
  fits a curve.  In this example, we will attempt to find an equation to mimic \
  the function <code>f(x) = x^4 + x^3 + x^2 + x</code>.\
  <p>\
  Click the Run Example button below to run this example.  You will see the \
  target function in red and the estimate produced by the MOEA Framework in \
  blue.
  
regression2.name = Symbolic Regression - Function 2
regression2.description = <html><h1>Symbolic Regression - Function 2</h1>\
  Symbolic regression attempts to discover a mathematical expression that best \
  fits a curve.  In this example, we will attempt to find an equation to mimic \
  the function <code>f(x) = x^5 - 2x^3 + x</code>.\
  <p>\
  Click the Run Example button below to run this example.  You will see the \
  target function in red and the estimate produced by the MOEA Framework in \
  blue.
  
regression3.name = Symbolic Regression - Function 3
regression3.description = <html><h1>Symbolic Regression - Function 3</h1>\
  Symbolic regression attempts to discover a mathematical expression that best \
  fits a curve.  In this example, we will attempt to find an equation to mimic \
  the function <code>f(x) = x^6 - 2x^4 + x^2</code>.\
  <p>\
  Click the Run Example button below to run this example.  You will see the \
  target function in red and the estimate produced by the MOEA Framework in \
  blue.
  
lotz.name = LOTZ Problem
lotz.description = <html><h1>Leading Ones, Trailing Zeros (LOTZ) Problem</h1>\
  The LOTZ problem is one of the canonical examples for bit string (binary) \
  problems.  The goal of this problem is an enumeration of bit strings that \
  begin with some number of 1 bits (leading ones), and the remaining bits are \
  0 (trailing zeros).  So, for example, the LOTZ solutions for a 4-bit example \
  are:\
  <pre>    1111\n    1110\n    1100\n    1000\n    0000</pre>\
  The first line has four leading ones and no trailing zeros, the second has \
  three leading ones and one trailing zero, and so on.\
  <p>\
  In this example, we will solve the LOTZ problem with 10 bits. \
  You can view the source code for setting up this example in the \
  <code>LOTZExample.java</code> tab.  Note that when we use the Executor to \
  run this problem, we do not need to specify that this problem uses a binary \
  encoding.  Rather, the MOEA Framework automatically determines the \
  representation and chooses the appropriate recombination and mutation \
  operators for the representation.\
  <p>\
  Click the Run Example button to run this example.  The output should contain \
  11 rows with varing numbers of leading ones and trailing zeros.  The two \
  numbers at the end of each row indicate the number of ones and zeros, \
  respectively, in the solution.
  
onemax.name = One-Max Problem
onemax.description = <html><h1>One-Max Problem</h1>\
  The one-max problem is another canonical example for bit string (binary) \
  problems.  The goal of this problem is to maximize the number of 1's in the \
  bit string.  While the solution to this problem is trivial (all bits set to \
  1), the one-max problem is commonly used to measure the convergence speed of \
  an algorithm.  In other words, how many function evaluations are needed to \
  find the optimal solution to this problem?  For this example, we will \
  determine how many function evaluations are needed for the one-max problem \
  with 100 bits.\
  <p>\
  Click the Run Example button to run this example.
  
knapsack.name = Knapsack Problem
knapsack.description = <html><h1>Knapsack Problem</h1>\
  The knapsack problem is a famous combinatorial problem that involves \
  choosing which items to place in a knapsack to maximize the value of the \
  items carried without exceeding the weight capacity of the knapsack.  See \
  the <a href=\"http://en.wikipedia.org/wiki/Knapsack_problem\">Wikipedia \
  article</a> for details.\
  <p>\
  In this example, we will be solving a multiobjective variant of the knapsack \
  problem.  For this example, we need to pick which items (100 available) to \
  place into two sacks.  Each sack assigns its own weight and profit to each \
  item.  See the tab <code>knapsack.100.2</code> to see the weights and \
  profits for each item.\
  <p>\
  Click the Run Example button below to run this example.  When it finishes, \
  the screen will show all optimal solutions to this problem.  Since this is a \
  multiobjective problem, there will be more than one optimal solution.  The \
  binary string indicates which items are included in the sack (1) and which \
  are excluded (0).
  
ant1.name = Ant Problem - Santa Fe
ant1.description = <html><h1>Ant Problem - Santa Fe Trail</h1>\
  The ant problem defines a world containing food at certain positions, and \
  aims to design a robotic ant to navigate through the world and eat the food. \
  This robotic ant is controlled by a program consisting of several \
  operations:\
  <ol>\
    <li>if-else condition,\
    <li>turn left,\
    <li>turn right,\
    <li>move forward, and\
    <li>check if food is ahead.\
  </ol>\
  Using the MOEA Framework's genetic programming capability, we can encode \
  these operations as operators in a programming language, and evolve the \
  program to search the world for food.\
  <p>\
  See the tabs for details on implementing the ant problem in the MOEA \
  Framework.  In particular, the <code>santafe.trail</code> tab shows the \
  position of food (#).  The full source code for this problem can be found in \
  the <code>examples/org/moeaframework/examples/gp/ant</code> directory.\
  <p>\
  Click the Run Example button below to run this example.  When it finishes, \
  it will print out the world showing the food eaten (@) and the uneaten food \
  (#).
  
ant2.name = Ant Problem - Los Altos
ant2.description = <html><h1>Ant Problem - Los Altos Trail</h1>\
  The Los Altos trail is a harder variant of the ant problem.  The food is \
  dispersed along a more complex trail, and a more complex program is needed \
  to control the ant.\
  <p>\
  Click the Run Example button to run this example.  It may take several \
  minutes for the output to appear.
  
tsp1.name = Traveling Salesman Problem - PR76
tsp1.description = <html><h1>Traveling Salesman Problem - PR76 Instance</h1>\
  The traveling salesman problem (TSP) is a famous combinatorial optimization \
  problem.  The traveling salesman must visit every city on a map but has one \
  restriction: she can only visit a city once.  Since fuel costs money, she \
  wants to find a route between all the cities that minimizes the total \
  distance traveled.  Additional details can be found on the <a \
  href=\"http://en.wikipedia.org/wiki/Travelling_salesman_problem\">\Wikipedia \
  page</a>.\
  <p>\
  In this example, we will attempt to solve <code>pr76.tsp</code>, a 76 city \
  map developed by Manfred Padberg and Giovanni Rinaldi, two famous TSP \
  researchers.  This problem instance and more are available \
  <a href=\"http://comopt.ifi.uni-heidelberg.de/software/TSPLIB95/\">here</a>. \
  Start the optimization by clicking the Run Example button.  The GUI will \
  show the best path discovered by the MOEA Framework in red.  The lighter \
  gray lines show alternative paths being searched by the MOEA Framework. \
  The optimal tour has a length of 108159.\
  <p>\
  <i>Note: This example uses the open source \
  <a href=\"https://github.com/dhadka/TSPLIB4J\">TSPLIB4J library</a>.
  
tsp2.name = Traveling Salesman Problem - A280
tsp2.description = <html><h1>Traveling Salesman Problem - A280 Instance</h1>\
  This example attempts to solve a harder TSP instance, <code>a280.tsp</code>. \
  This instance has 280 cities.  Click the Run Example button below and see \
  how long it takes to find the optimal tour of length 2579.\
  <p>\
  <i>Note: This example uses the open source \
  <a href=\"https://github.com/dhadka/TSPLIB4J\">TSPLIB4J library</a>.

diagnostic.name = Diagnostic Tool
diagnostic.description = <html><h1>Diagnostic Tool</h1>\
  The MOEA Framework provides several built-in optimization algorithms along \
  with many test problems.  The diagnostic tool is a GUI for solving these \
  test problems using the available optimization algorithms.  The GUI will \
  appear when you click the Run Example button.  Use the drop-down menus in \
  the upper-left portion of the window to select which algorithm and problem \
  the use.  Then click Run to solve the problem.  The various performance \
  metrics are available for plotting.  You can select the metrics from the \
  list in the lower-left portion of the window.

conclusion.name = Conclusion
conclusion.description = <html><h1>Conclusion</h1>\
  The MOEA Framework is a powerful library allowing you to experiment with \
  multiobjective evolutionary algorithms.  It is completely free and open \
  source, giving you the freedom to use, learn from, and modify as you see \
  fit.  Please visit our website at \
  <a href="http://www.moeaframework.org">http://www.moeaframework.org</a> \
  to download the source code, user manual, access the API documentation, \
  submit bug reports, or learn how to contribute to this software.
				
				
				
				
				
				
				
				
				
				
				