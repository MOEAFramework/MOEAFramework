## =======================
##  General Configuration
## =======================

## Rank-based statistical inference methods, such as the Mann-Whitney U test
## and the Wilcoxon Signed-Ranks test, approximate the test's discrete
## distribution with a continuous distribution for computing the p-value. It
## has been recommended but not often employed in practice to apply a
## continuity correction. When this flag is set to true, such tests include
## continuity correction.
#org.moeaframework.util.statistics.continuity_correction = false

## By default, non-dominated populations do not allow two solutions with nearly
## identical objective values.  This behavior can be modified:
##   NO_DUPLICATE_OBJECTIVES - Do not allow solutions with nearly identical
##       objectives
##   ALLOW_DUPLICATE_OBJECTIVES - Allow solutions with nearly identical
##       objectives if they have different decision variables
##   ALLOW_DUPLICATES - Allow all duplicate solutions (use caution since the
##       size of the population can grow large)
#org.moeaframework.core.duplicate_mode = NO_DUPLICATE_OBJECTIVES

## Non-dominated sorting is used in algorithms like NSGA-II to rank solutions.
## There are two implementations available: the "fast" version and the "naive"
## version.  The fast version has a worst case time complexity of O(MN^2) versus
## O(MN^3) of the naive implementation, where M is the number of objectives and
## N is the number of solutions.  However, the naive implementations tends to
## have a faster average time and is used by default.  Use this setting to enable
## or disable fast non-dominated sorting. If speed is a concern, we recommend
## testing both options to see which performs well.
#org.moeaframework.core.fast_nondominated_sorting = false

## Suppress all warnings when a parameter is being implicitly converted from a
## real-value to an integer and the decimal places are truncated.  For example,
## population size is expected to be an integer, but if given as a real-value
## it will be converted to an integer (e.g., 100.2 -> 100).
#org.moeaframework.core.suppress_truncation_warning = true

## Genetic programming functions are by default protected against returning
## NaN or other invalid numbers.  Unless protected against, these invalid
## values propagate throughout the expression and corrupt the results.  This
## feature can be disabled by setting this flag to false.
#org.moeaframework.util.tree.protected_functions = false

## The generational distance (GD) and inverted generational distance (IGD)
## indicators are typically computed using some power d.  In the literature, 
## typically GD uses d=2 and IGD uses d=1.
#org.moeaframework.core.indicator.gd_power = 2.0
#org.moeaframework.core.indicator.igd_power = 1.0

## When calculating the reference point for the hypervolume calculation, the
## nadir point of the reference set is offset by the delta factor (e.g.,
## min + delta*(max-min)).  A small but non-zero delta is recommended.
#org.moeaframework.core.indicator.hypervolume_delta = 0.01

## A custom ideal and reference point can be defined for each problem.  The name
## must match the value returned by Problem#getName().  Separate values with
## commas.  The last value will be repeated as needed to define the reference
## point (e.g., the value 2 is expanded to (2, 2, ..., 2)).
#org.moeaframework.core.indicator.hypervolume_idealpt.DTLZ3 = 0
#org.moeaframework.core.indicator.hypervolume_refpt.DTLZ3 = 2

## The default hypervolume implementation may become computationally prohibitive
## on large approximation sets or at high dimensions.  Custom hypervolume
## implementations can be provided.  The following variable substitutions are
## provided:
##   {0} number of objectives
##   {1} approximation set size
##   {2} file containing the approximation set
##   {3} file containing the reference point
##   {4} the reference point, separated by spaces
#org.moeaframework.core.indicator.hypervolume = ./wfg2.exe {2}
#org.moeaframework.core.indicator.hypervolume = ./hoy.exe {0} {1} {2} {3} 

## By default, hypervolume calculations are given the minimized approximation
## set, so the reference point is at (1, 1, ..., 1).  If the custom hypervolume
## implementation requires maximized sets, such that the reference point is at
## (0, 0, ..., 0), set this option to true.
#org.moeaframework.core.indicator.hypervolume_inverted = true

## In cases where the default or custom hypervolume implementations are
## computationally prohibitive, the hypervolume indicator can be optionally
## disabled.  When disabled, the hypervolume will be reported as NaN.
#org.moeaframework.core.indicator.hypervolume_enabled = false

## When restarting an interrupted run, the software will attempt to recover data
## from the prior run.  It first cleans the file to remove any invalid data.
## During cleanup, the software moves the old data into an "unclean" file, then
## proceeds to copy all valid data out of the unclean file.  If this process is
## interrupted, the unclean file may still exist.  By default, the software
## will exit with an exception if an unclean file exists, which would require
## manual intervention.  Setting this option to 'overwrite' will automatically
## delete the unclean file.  Setting this option to 'restore' will attempt to
## recover the unclean file.
#org.moeaframework.analysis.sensitivity.cleanup = restore

## Enables writing additional debugging information to standard output when
## running an external problem.  The debugging info will show the decision
## variables (lines starting with <<) and the output from the process (lines
## starting with >>).
#org.moeaframework.problem.external_problem_debugging = true

## ==============================
##  Custom Problem Configuration
## ==============================

## The following enumerates a list of problems by name that are made available
## through the ProblemFactory.  For each problem listed, the
##   org.moeaframework.problem.NAME.class
## property must be specified with the implementation's class name, and
##   org.moeaframework.problem.NAME.referenceSet
## optionally providing the filename for the reference set.
#org.moeaframework.problem.problems = 


## ===============================
##  Diagnostic Tool Configuration
## ===============================

## Comma-separated list of algorithms available in the diagnostic tool.
#org.moeaframework.analysis.diagnostics.algorithms = NSGAII, NSGAIII, GDE3, \
#    eMOEA, eNSGAII, MOEAD, Random

## Comma-separated list of problems available in the diagnostic tool.
#org.moeaframework.analysis.diagnostics.problems = \
#    DTLZ1_2, DTLZ2_2, DTLZ3_2, DTLZ4_2, DTLZ7_2, \
#    ROT_DTLZ1_2, ROT_DTLZ2_2, ROT_DTLZ3_2, ROT_DTLZ4_2, ROT_DTLZ7_2, \
#    UF1, UF2, UF3, UF4, UF5, UF6, UF7, UF8, UF9, UF10, UF11, UF12, UF13, \
#    CF1, CF2, CF3, CF4, CF5, CF6, CF7, CF8, CF9, CF10, \
#    LZ1, LZ2, LZ3, LZ4, LZ5, LZ6, LZ7, LZ8, LZ9, \
#    WFG1_2, WFG2_2, WFG3_2, WFG4_2, WFG5_2, WFG6_2, WFG7_2, WFG8_2, WFG9_2, \
#    ZDT1, ZDT2, ZDT3, ZDT4, ZDT5, ZDT6, \
#    Belegundu, Binh, Binh2, Binh3, Binh4, Fonseca, Fonseca2, Jimenez, Kita, \
#    Kursawe, Laumanns, Lis, Murata, Obayashi, OKA1, OKA2, Osyczka, Osyczka2, \
#    Poloni, Quagliarella, Rendon, Rendon2, Schaffer, Schaffer2, Srinivas, \
#    Tamaki, Tanaka, Viennet, Viennet2, Viennet3, Viennet4
